
name: ESP32

# run aaa
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
# add something
on:
  push:
  pull_request:
    paths:
      - ".github/workflows/build_esp32.yml"
      - "micropython-modules/microlite/**"
      - "micropython-modules/micropython-camera-driver/**"
      

jobs:
  tensorflow_micropython_esp32_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ESP32-MICROLITE No SPIRAM - 4MB Flash
        run: |
          source ./scripts/build.sh && prepare_dependencies
          echo "CODECONTENTS=$(cat ./dependencies/micropython/tools/ci.sh)"
          source ./dependencies/micropython/tools/ci.sh && ci_esp32_idf50_setup
          echo "BUILDING MICROLITE"
          
          source ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_S3_SPIRAM"
          cd ./boards/esp32/MICROLITE_S3_SPIRAM

          echo "Building ESP32-MICROLITE_S3_SPIRAM"
          rm -rf builds
          idf.py clean build
          
          TARGET=$(pwd)/dependencies/micropython/ports/esp32
          echo "TARGET=$TARGET"
          ./scripts/assemble-unified-image-esp.sh $TARGET "MICROLITE"

          ../../../micropython-modules/microlite/assemble-unified-image-esp.sh \
          ../../../micropython/ports/esp32

          
        shell: bash

      - name: Archive ESP32-MICROLITE No SPIRAM - 8 MB Flash firmware
        uses: actions/upload-artifact@v3
        with:
          name: microlite-esp32-firmware
          path: /home/runner/work/upython/upython/dependencies/micropython/ports/esp32/build-MICROLITE/firmware.bin
   
  
  
     
   
